
syntax = "proto3";

package proto.contract;

import "google/protobuf/any.proto";
import "common.proto";

message AccountCreateContract {
  bytes owner_address = 1;
  bytes account_address = 2;
  proto.common.AccountType type = 3;
}

// Update account name. Account name is not unique now.
message AccountUpdateContract {
  // max len = 200
  bytes account_name = 1;
  bytes owner_address = 2;
}

// Set account id if the account has no id. Account id is unique and case
// insensitive.
message SetAccountIdContract {
  bytes account_id = 1;
  bytes owner_address = 2;
}

message TransferContract {
  bytes owner_address = 1;
  bytes to_address = 2;
  int64 amount = 3;
}

message ShieldAddress {
  bytes private_address = 1;
  bytes public_address = 2;
}

message TransferAssetContract {
  // this field is token name before the proposal ALLOW_SAME_TOKEN_NAME's
  // activation, otherwise it is token id and token should be in string format.
  // used as asset id str as bytes, LEN = 7 bytes: 100xx
  // changed: bytes
  string asset_name = 1;
  bytes owner_address = 2;
  bytes to_address = 3;
  int64 amount = 4;
}

message VoteAssetContract {
  bytes owner_address = 1;
  repeated bytes vote_address = 2;
  // renamed: support
  bool is_support = 3;
  int32 count = 5;
}

message VoteWitnessContract {
  message Vote {
    bytes vote_address = 1;
    int64 vote_count = 2;
  }
  bytes owner_address = 1;
  repeated Vote votes = 2;
  // not used
  bool is_support = 3;
}

message UpdateSettingContract {
  bytes owner_address = 1;
  bytes contract_address = 2;
  int64 consume_user_resource_percent = 3;
}

message UpdateEnergyLimitContract {
  bytes owner_address = 1;
  bytes contract_address = 2;
  int64 origin_energy_limit = 3;
}

message ClearABIContract {
  bytes owner_address = 1;
  bytes contract_address = 2;
}

message WitnessCreateContract {
  bytes owner_address = 1;
  bytes url = 2;
}

message WitnessUpdateContract {
  bytes owner_address = 1;
  bytes update_url = 12;
}

message AssetIssueContract {
  message FrozenSupply {
    int64 frozen_amount = 1;
    int64 frozen_days = 2;
  }

  bytes owner_address = 1;
  // changed: bytes
  string name = 2;
  // changed: bytes
  string abbr = 3;
  int64 total_supply = 4;
  repeated FrozenSupply frozen_supply = 5;
  int32 trx_num = 6;
  int32 precision = 7;
  int32 num = 8;
  int64 start_time = 9;
  int64 end_time = 10;
  int64 order = 11;  // useless
  int32 vote_score = 16;
  // changed: bytes
  string description = 20;
  // changed: bytes
  string url = 21;
  int64 free_asset_net_limit = 22;
  int64 public_free_asset_net_limit = 23;
  int64 public_free_asset_net_usage = 24;
  int64 public_latest_free_net_time = 25;
  string id = 41;
}

message ParticipateAssetIssueContract {
  bytes owner_address = 1;
  bytes to_address = 2;
  // this field is token name before the proposal ALLOW_SAME_TOKEN_NAME's
  // activation, otherwise it is token id and token should be in string format.
  //
  // changed: bytes
  string asset_name = 3;
  int64 amount = 4;  // the amount of drops
}

enum ResourceCode {
  BANDWIDTH = 0x00;
  ENERGY = 0x01;
}

message FreezeBalanceContract {
  bytes owner_address = 1;
  int64 frozen_balance = 2;
  int64 frozen_duration = 3;

  ResourceCode resource = 10;
  bytes receiver_address = 15;
}

message UnfreezeBalanceContract {
  bytes owner_address = 1;

  ResourceCode resource = 10;
  bytes receiver_address = 15;
}

message UnfreezeAssetContract {
  bytes owner_address = 1;
}

message WithdrawBalanceContract {
  bytes owner_address = 1;
}

message UpdateAssetContract {
  bytes owner_address = 1;
  bytes description = 2;
  bytes url = 3;
  int64 new_limit = 4;
  int64 new_public_limit = 5;
}

message ProposalCreateContract {
  bytes owner_address = 1;
  map<int64, int64> parameters = 2;
}

message ProposalApproveContract {
  bytes owner_address = 1;
  int64 proposal_id = 2;
  // renamed: is_add_approval
  bool is_approval = 3;  // add or remove approval
}

message ProposalDeleteContract {
  bytes owner_address = 1;
  int64 proposal_id = 2;
}

message CreateSmartContract {
  bytes owner_address = 1;
  proto.common.SmartContract new_contract = 2;
  int64 call_token_value = 3;
  int64 call_token_id = 4;
}

message TriggerSmartContract {
  bytes owner_address = 1;
  bytes contract_address = 2;
  int64 call_value = 3;
  bytes data = 4;
  int64 call_token_value = 5;
  int64 call_token_id = 6;
}

/*
message BuyStorageContract {
  bytes owner_address = 1;
  int64 quant = 2; // trx quantity for buy storage (in sun)
}

message BuyStorageBytesContract {
  bytes owner_address = 1;
  int64 bytes = 2; // storage bytes for buy
}

message SellStorageContract {
  bytes owner_address = 1;
  int64 storage_bytes = 2;
}
*/

message ExchangeCreateContract {
  bytes owner_address = 1;
  bytes first_token_id = 2;
  int64 first_token_balance = 3;
  bytes second_token_id = 4;
  int64 second_token_balance = 5;
}

message ExchangeInjectContract {
  bytes owner_address = 1;
  int64 exchange_id = 2;
  bytes token_id = 3;
  int64 quant = 4;
}

message ExchangeWithdrawContract {
  bytes owner_address = 1;
  int64 exchange_id = 2;
  bytes token_id = 3;
  int64 quant = 4;
}

message ExchangeTransactionContract {
  bytes owner_address = 1;
  int64 exchange_id = 2;
  bytes token_id = 3;
  int64 quant = 4;
  int64 expected = 5;
}

message AccountPermissionUpdateContract {
  bytes owner_address = 1;
  proto.common.Permission owner = 2;  // empty means invalidate
  proto.common.Permission witness = 3;
  repeated proto.common.Permission actives = 4;  // empty means invalidate
}

message UpdateBrokerageContract {
  bytes owner_address = 1;
  int32 brokerage = 2;  // in percent
}
